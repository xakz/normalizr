#!/usr/bin/env perl


# Copyright (c) 2012, 2013, Maxime Chatelle, All rights reserved.

# Authors: Maxime Chatelle <xakz@rxsoft.eu>

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.

#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# The views and conclusions contained in the software and
# documentation are those of the authors and should not be interpreted
# as representing official policies, either expressed or implied, of
# author(s).


use strict;
use warnings;
use feature qw(unicode_strings);

use Getopt::Std;
use File::Spec::Functions;
use File::Basename;

####### constants #######
my $DEBUG = 0;
my $VERSION = '0.7.1';

# my $ERASE_TOKENS = 'dvdrip|divx|scr|truefrench|hdrip|xvid|ts|brrip|'.
#   'md|bdrip|repack|1cd|vf|vo|vostfr|vostr|vfstfr|vostfr|fr|cd\d+|disk\d+|'.
#   'dvd\d+|dvd';

####### globals #######

# options
my %opts = (
	    # character used for white space
	    's' => '.',
	    # valid char regex
	    'g' => '-a-zA-Z0-9_^+%@',
	    # word char regex, border of filename allow only these, and for CamelCasing too
	    'w' => 'a-zA-Z0-9',
	   );

############################ aesthetic functions ###################
sub usage {
  print <<EOF;

SYNOPSIS
 normalizr [OPTIONS] [FILENAMES]

DESCRIPTION
 this tool correct file names.
 Take file names from the command-line.

OPTIONS
 -n             Dry-run.
 -r             Recursive.
 -q             Be quiet.
 -P             Remove content of parentheses pair (), [], {}, etc...
 -U             Change case to UPCASE.
 -D             Change case to downcase.
 -s <char>      White space and invalid characters (see -g) will be
                converted to this character (default is “$opts{s}”).
 -g <regex>     Regex of valid (Good) chars. (default: “$opts{g}”)
 -w <regex>     Regex of what is a word (defaults: “$opts{w}”
 -V             version info.
 -h             This help.
EOF
}

sub version {
  my $name = basename($0);
  print <<EOF;
\033[1;37m$name\033[0m version \033[1;37m$VERSION\033[0m
Copyright (c) 2012, 2013, Maxime Chatelle, All rights reserved.
Licensed under BSD 2 clauses license.
See source code for licensing details.
EOF

}

## options processing
unless (getopts('nrqPUDs:g:w:Vh', \%opts)) {
  usage();
  exit 4;
}
if ($DEBUG) {
  print STDERR '$opts: ';
  for (keys(%opts)) {
    print STDERR "$_ => " . $opts{$_} . "\n";
  }
}
version(), exit 0 if ($opts{V});
usage(), exit 0 if ($opts{h});

## cleanup some options
$opts{s} = substr($opts{s}, 0, 1);
$opts{q} = undef if ($opts{n});
if ($opts{c} and $opts{c} !~ /^(none|low|up)$/) {
  print STDERR "Unknown case type: " . $opts{c} . "\n";
  usage();
  exit 1;
}

## fix parameter missing
if (!@ARGV) {
  if ($opts{r}) {
    opendir(my $dh, '.') || die "Unable to open current directory.";
    while (readdir $dh) {
      push @ARGV, $_ if (!/^\.\.?$/);
    }
    closedir $dh;
  } else {
    print STDERR "File or -r option missing, nothing to do.\n" if (!$opts{q});
    exit 8;
  }
}

## loop on parameters
for (@ARGV) {
  do_job_on_filedir($_);
}


############################ FUNCTIONS #########################


# recursively (if -r) do the job
sub do_job_on_filedir {
  my $filedir = shift;

  print STDERR "\033[1;33mEntering\033[0;36m $filedir\033[1;33m...\033[0m\n" if (!$opts{q} and -d $filedir);
  if (-d $filedir  and $opts{r}) {
    opendir(my $dh, $filedir) || die "Can't open $filedir: $!";
    while (readdir $dh) {
      do_job_on_filedir(catfile($filedir, $_)) if (!/^\.\.?$/);
    }
    closedir $dh;
  }
  print STDERR "\033[33m Leaving\033[36m $filedir\033[33m...\033[0m\n" if (!$opts{q} and -d $filedir);
  $filedir = rename_if_needed($filedir);
}

# do what the function name suggest..
sub rename_if_needed {
  my $from = canonpath(shift);

  # normalize
  my $to = canonpath(normaliz($from));

  my ($short_from, $dir) = fileparse($from);
  my ($short_to) = fileparse($to);

  if ($from eq $to) {
    return $from;
  }

  if (-e $to) {
    print STDERR "\033[1;31mWARNING: ".
      "cannot rename $from to $to: already exists.\033[0m\n";
    return $from;
  }

  if (!$opts{q}) {
    print STDERR "  \033[34m".$short_from.
      "\033[33m -> \033[34m".$short_to."\033[0m\n";
  }

  if (!$opts{n}) {
    rename $from, $to || die "\033[31mUnable to rename $from to $to: $!\033[0m";
  } else {
    return $from;
  }

  return $to;
}

# split the file name and correct it.
sub normaliz {
  my $original = shift;

  # extract filename parts
  my ($file, $folder, $ext);

  if (-d $original) {
    print STDERR "$original is a directory.\n" if ($DEBUG);
    ($file, $folder) = fileparse($original);
    $file = fix_case(remove_bad_ass($file));
  } else {
    print STDERR "$original is not a directory.\n" if ($DEBUG);
    ($file, $folder, $ext) = fileparse($original, qr/\.[^.]+$/);
    $file = fix_case(remove_bad_ass($file)) . $ext;
  }


  return catfile($folder, $file);
}

#########################
# Cleanup the string using many regex
# non ascii char will be converted to ascii equivalent.
# braces and quotes, and their content are removed.
# remaining invalid char replaced by white space char (opt -s).
# and some other cleanup...
sub remove_bad_ass {
  my $fn = shift;
  print STDERR "remove_bad_ass:0: $fn\n" if ($DEBUG);

  if ($opts{P}) {
    # text in braces are 99% useless
    my @reb = (
	       qr/\[[^]]*\]/,
	       qr/{[^}]*}/,
	       qr/\([^)]*\)/,
	       qr/«[^»]*»/,
	       qr/‘[^’]*’/,
	      );
    foreach my $re (@reb) {
      $fn =~ s/$re//g while ($fn =~ m/$re/);
    }
    print STDERR "remove_bad_ass:10: $fn\n" if ($DEBUG);
  }

  # ASCII only
  $fn =~ s/\351/é/g;
  $fn =~ s/\350/è/g;
  $fn =~ s/é|ê|è|ë/e/g;
  $fn =~ s/á|â|à|ă|ä|å/a/g;
  $fn =~ s/í|î|ì|ĩ|ï/i/g;
  $fn =~ s/ó|ô|ò|õ|ö|ð/o/g;
  $fn =~ s/ú|û|ù|ũ|ü/u/g;
  $fn =~ s/ý|ŷ|ỳ|ỹ|ÿ/y/g;
  $fn =~ y/ßŋħĸł¢µçñ/sghklcmcn/;
  $fn =~ s/œ/oe/g;
  $fn =~ s/æ/ae/g;
  print STDERR "remove_bad_ass:20: $fn\n" if ($DEBUG);

  $fn =~ s/É|Ê|È|Ë/E/g;
  $fn =~ s/Á|Â|À|Ă|Ä|Å/A/g;
  $fn =~ s/Í|Î|Ì|Ĩ|Ï/I/g;
  $fn =~ s/Ó|Ô|Ò|Õ|Ö|Ð/O/g;
  $fn =~ s/Ú|Û|Ù|Ũ|Ü/U/g;
  $fn =~ s/Ý|Ŷ|Ỳ|Ỹ|ÿ/Y/g;
  $fn =~ y/ßŊĦĸŁ¢µÇÑ/SGHKLCMCN/;
  $fn =~ s/Œ/OE/g;
  $fn =~ s/Æ/AE/g;
  print STDERR "remove_bad_ass:30: $fn\n" if ($DEBUG);

  # replace remaining invalid chars with white space char
  $fn =~ s/[^$opts{g}]+/$opts{s}/g;
  print STDERR "remove_bad_ass:40: $fn\n" if ($DEBUG);

  # some frequent patterns, all following text are 99% not part of the title
  #$fn =~ s/^(.+?)\b($ERASE_TOKENS)\b.*$/$1/ig while (/\b($ERASE_TOKENS)\b/i);
  print STDERR "remove_bad_ass:50: $fn\n" if ($DEBUG);

  # reduce multiple white space char
  $fn =~ s/[$opts{s}]+/$opts{s}/g;
  print STDERR "remove_bad_ass:60: $fn\n" if ($DEBUG);

  # remove '.-.' pattern and derived
  $fn =~ s/([$opts{s}]-[$opts{s}]?|-[$opts{s}])/$opts{s}/g;
  print STDERR "remove_bad_ass:70: $fn\n" if ($DEBUG);

  # remove trailing or prefix dots or dash
  $fn =~ s/^([$opts{s}]|-)+//;
  $fn =~ s/([$opts{s}]|-)+$//;
  print STDERR "remove_bad_ass:80: $fn\n" if ($DEBUG);

  # if finished by .french or .fr or like, 99% chance that is the language
  # $fn =~ s/\b(french|
  #     fr|
  #     english|
  #     en)$//ixg;
  print STDERR "remove_bad_ass:90: $fn\n" if ($DEBUG);

  # reduce multiple white space char
  $fn =~ s/[$opts{s}]+/$opts{s}/g;
  print STDERR "remove_bad_ass:60: $fn\n" if ($DEBUG);

  # remove '.-.' pattern and derived
  $fn =~ s/([$opts{s}]-[$opts{s}]?|-[$opts{s}])/$opts{s}/g;
  print STDERR "remove_bad_ass:70: $fn\n" if ($DEBUG);

  # remove trailing or prefix dots or dash
  $fn =~ s/^([$opts{s}]|-)+//;
  $fn =~ s/([$opts{s}]|-)+$//;
  print STDERR "remove_bad_ass:80: $fn\n" if ($DEBUG);

  return $fn;
}

sub fix_case {
  my $fn = shift;

  # case handling
  if ($opts{D}) {
    $fn = lc $fn;
  } elsif ($opts{U}) {
    $fn = uc $fn;
  }

  return $fn;
}
